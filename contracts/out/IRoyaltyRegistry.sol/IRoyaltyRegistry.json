{"abi":[{"type":"function","name":"getOverrideLookupTokenAddress","inputs":[{"name":"overrideAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getRoyaltyLookupAddress","inputs":[{"name":"tokenAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"overrideAllowed","inputs":[{"name":"tokenAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"setRoyaltyLookupAddress","inputs":[{"name":"tokenAddress","type":"address","internalType":"address"},{"name":"royaltyAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"RoyaltyOverride","inputs":[{"name":"owner","type":"address","indexed":false,"internalType":"address"},{"name":"tokenAddress","type":"address","indexed":false,"internalType":"address"},{"name":"royaltyAddress","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getOverrideLookupTokenAddress(address)":"446e5365","getRoyaltyLookupAddress(address)":"de5488af","overrideAllowed(address)":"70e06281","setRoyaltyLookupAddress(address,address)":"26bd8982","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyOverride\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"overrideAddress\",\"type\":\"address\"}],\"name\":\"getOverrideLookupTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRoyaltyLookupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"overrideAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyLookupAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Royalty registry interface\",\"kind\":\"dev\",\"methods\":{\"getOverrideLookupTokenAddress(address)\":{\"params\":{\"overrideAddress\":\"- The override address you are looking up the token for\"}},\"getRoyaltyLookupAddress(address)\":{\"params\":{\"tokenAddress\":\"- The token address you are looking up the royalty for\"}},\"overrideAllowed(address)\":{\"params\":{\"tokenAddress\":\"- The token address you are looking up the royalty for\"}},\"setRoyaltyLookupAddress(address,address)\":{\"params\":{\"royaltyAddress\":\"- The royalty override address\",\"tokenAddress\":\"- The token address you wish to override\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOverrideLookupTokenAddress(address)\":{\"notice\":\"Returns the token address that an overrideAddress is set for. Note: will not be accurate if the override was created before this function was added.\"},\"getRoyaltyLookupAddress(address)\":{\"notice\":\"Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists\"},\"overrideAllowed(address)\":{\"notice\":\"Whether or not the message sender can override the royalty address for the given token address\"},\"setRoyaltyLookupAddress(address,address)\":{\"notice\":\"Override the location of where to look up royalty information for a given token contract. Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/royalty-registry-solidity/contracts/IRoyaltyRegistry.sol\":\"IRoyaltyRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/\",\":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/\",\":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":oracle/=lib/oracle/contracts/\",\":reservoir-oracle/=lib/oracle/contracts/\",\":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/royalty-registry-solidity/contracts/IRoyaltyRegistry.sol\":{\"keccak256\":\"0xbb1af5eb087f9e29fe8e879644f8d450dfeb53457a9abc3e03cb019b2f3653cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7de72b2ec63a5c4ab735ffd761d4dfdf3590017f713ed3002707777062033cd4\",\"dweb:/ipfs/QmUjjXZ81JiTknaCkg92EpwyRsagP9HPsLgA7d2paPdcMc\"]},\"lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":false},{"internalType":"address","name":"tokenAddress","type":"address","indexed":false},{"internalType":"address","name":"royaltyAddress","type":"address","indexed":false}],"type":"event","name":"RoyaltyOverride","anonymous":false},{"inputs":[{"internalType":"address","name":"overrideAddress","type":"address"}],"stateMutability":"view","type":"function","name":"getOverrideLookupTokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"view","type":"function","name":"getRoyaltyLookupAddress","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"view","type":"function","name":"overrideAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"royaltyAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setRoyaltyLookupAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getOverrideLookupTokenAddress(address)":{"params":{"overrideAddress":"- The override address you are looking up the token for"}},"getRoyaltyLookupAddress(address)":{"params":{"tokenAddress":"- The token address you are looking up the royalty for"}},"overrideAllowed(address)":{"params":{"tokenAddress":"- The token address you are looking up the royalty for"}},"setRoyaltyLookupAddress(address,address)":{"params":{"royaltyAddress":"- The royalty override address","tokenAddress":"- The token address you wish to override"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"getOverrideLookupTokenAddress(address)":{"notice":"Returns the token address that an overrideAddress is set for. Note: will not be accurate if the override was created before this function was added."},"getRoyaltyLookupAddress(address)":{"notice":"Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists"},"overrideAllowed(address)":{"notice":"Whether or not the message sender can override the royalty address for the given token address"},"setRoyaltyLookupAddress(address,address)":{"notice":"Override the location of where to look up royalty information for a given token contract. Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them."}},"version":1}},"settings":{"remappings":["@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/","@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/","ERC721A/=lib/ERC721A/contracts/","create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/","create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/","openzeppelin-contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","oracle/=lib/oracle/contracts/","reservoir-oracle/=lib/oracle/contracts/","royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":100},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/royalty-registry-solidity/contracts/IRoyaltyRegistry.sol":"IRoyaltyRegistry"},"evmVersion":"london","libraries":{}},"sources":{"lib/royalty-registry-solidity/contracts/IRoyaltyRegistry.sol":{"keccak256":"0xbb1af5eb087f9e29fe8e879644f8d450dfeb53457a9abc3e03cb019b2f3653cc","urls":["bzz-raw://7de72b2ec63a5c4ab735ffd761d4dfdf3590017f713ed3002707777062033cd4","dweb:/ipfs/QmUjjXZ81JiTknaCkg92EpwyRsagP9HPsLgA7d2paPdcMc"],"license":"MIT"},"lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1","urls":["bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f","dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"],"license":"MIT"}},"version":1},"id":28}